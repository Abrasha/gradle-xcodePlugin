/*

If you what to create a build for the device than you have to specify for sign sign settings.

e.g for a adHoc build:

Create a gradle.properties and add the following values: 

Example.AdHoc.SigningCertificateURI=http://.../Development.p12  // file:// urls also works here
Example.AdHoc.SigningCertificatePassword=mySecrect
Example.AdHoc.SigningMobileProvisionURI_0=http://.../Development.mobileprovision

Then run: 'gradle package/Example/AdHoc


*/


buildscript {
	repositories {
		maven {
			url('http://repository.openbakery.org')
		}
		mavenCentral()
  }

	dependencies {
	    classpath "org.openbakery:xcode-plugin:0.12.+"
	}
}

apply plugin: 'org.openbakery.xcode-plugin'


xcodebuild {
	//version = "6.2"  // uncomment this if you want to use xcode 6.1, but another xcode is the default on your machine
	version = "7"
	
	target = 'Example'
	scheme = 'Example'
	configuration = 'Test'	
	simulator = false	
	destination = ['iPad 2', 'iPhone 4s' ]

}


coverage {
	outputFormat = 'html'
	exclude = '.*h$|.*UnitTests.*m$'
}

task adhoc(dependsOn:'package/Example/AdHoc', description: 'Creates an adhoc device build') {
}


task appstore(dependsOn:'package/Example/Appstore', description: 'Creates an appstore device build') {
}


def configureDescription = 'Configures the build according to the passed <ConfigurationName>'
def archiveDescription = 'Configures the project using "configure<ConfigurationName>" and saves an Xcode archive'
def packageDescription = 'Packages and codesignes the project after executing "archive<ConfigurationName" and saves the resulting ipa'
def distributeHockeyDescription = 'Executes "package<Properties>/<ConfigurationName>" and uploads the resulting ipa to Hockey. e.g. package/Example/AdHoc'

def getPropertyForComponents(List<String> components) {
  def propertyName = components.join('.')

	if (project.hasProperty(propertyName+"_0")) {
		// is array
		def result = []
		def counter = 0
		while(project.hasProperty(propertyName+"_"+counter)) {
			result << project.property(propertyName+"_"+counter)
			
			counter++
		}
		return result
	}
	/*	
	println propertyName

  if (!project.hasProperty(propertyName)) {
    components.pop()
    propertyName = components.join('.')
		
  }
	*/

  if (!project.hasProperty(propertyName)) {
		logger.warn("No property defined with name " + propertyName)
	}
  return project.hasProperty(propertyName) ? project.property(propertyName) : ""
}


tasks.addRule("Pattern: configure/<TargetName>: " + configureDescription) { String taskName ->
	if (taskName.startsWith("configure")) {
		task(taskName, dependsOn:['clean']) {
      def configurationName = (taskName - 'configure/')
      xcodebuild {
        configuration = 'Release'
        scheme = configurationName
        target = configurationName
      }
		}
    tasks[taskName].mustRunAfter(clean)
	}
}

tasks.addRule("Pattern: archive/<TargetName>: " + archiveDescription) { String taskName ->
  if (taskName.startsWith("archive")) {
    def configureTask = 'configure/' + (taskName - 'archive/')
    task(taskName, dependsOn:[configureTask, 'archive']).mustRunAfter(configureTask)
  }
}

tasks.addRule("Pattern: package/<TargetName>/<Properties>: " + packageDescription) { String taskName ->
  if (taskName.startsWith("package")) {
		
		def tokens = taskName.split('/')
		if (tokens.length != 3) {
			throw new IllegalArgumentException("Wrong number of parameters: package/<TargetName>/<Properties>")
		}
		
    def targetName = tokens[1]
    def properties = tokens[2]
    def archiveTask = 'archive/' + targetName
    task(taskName, dependsOn:[archiveTask, 'package']) {
      project.xcodebuild {
  			simulator = false
  			signing {
  				certificateURI = getPropertyForComponents([targetName, properties, 'SigningCertificateURI'])
  				certificatePassword = getPropertyForComponents([targetName, properties, 'SigningCertificatePassword'])
  				mobileProvisionURI = getPropertyForComponents([targetName, properties, 'SigningMobileProvisionURI'])
  			}
  		}
    }
    tasks[taskName].mustRunAfter(archiveTask)
  }
}



gradle.taskGraph.whenReady { taskGraph ->

	// ------------------------------------------------------------------------------------------

	if (taskGraph.hasTask(tasks.hockeyapp)) {
		println ("using api token: " + hockeyappApiToken)
		hockeyapp {
			apiToken = hockeyappApiToken
			appID = hockeyappAppId
		}
	}
	
	if (taskGraph.hasTask(tasks.deploygate)) {
		println ("using api token: " + deploygateApiToken)
		deploygate {
			apiToken = deploygateApiToken
			userName = deploygateUserName
		}
	}
	
	if (taskGraph.hasTask(appstoreValidate) || taskGraph.hasTask(appstoreUpload)) {
	
		if (appstore.username == null) {
			def username = System.console().readLine("\nPlease enter your Apple-ID that you use for iTunesConnect: ")
			appstore.username = new String(username)
		}
		
		if (appstore.password == null) {
			def password = System.console().readPassword("\nPlease enter the password for <" + appstore.username + ">: ")
			appstore.password = new String(password)
		}
	
	}
}


